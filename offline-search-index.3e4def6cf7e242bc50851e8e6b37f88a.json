[{"body":"Interlisp The 1970s and 80s saw major advances in computing and Human-Computer interaction. Interlisp was one of the many experimental systems developed during these heady times. It represents and early example of a system with a GUI (Graphical User Interface), and IDE (Integrated Development Environment) and within the Xerox PARC environment, it was an early example of a network enabled machine supporting email, file sharing . In essence it was a forerunner of today’s computing systems.\nMedley Medley Interlisp represents the last Xerox Interlisp release. Medley continued Xerox PARC’s experimentation with developing systems for D-machines, a family of computers (Dorado, Dolphin, Dandelion, Daybreak) descended. The project was later spun out to a company called Envos, which then turned into Venue.\nIt was the first IDE with a window/mouse/menu GUI, launched as a product from Xerox in 1980. It was a base from which AI applications were built, as well as a research project in its own right.\nMedley Interlisp User Interface. Restoration Our aim is to restore Medley Interlisp to usability on modern systems, sufficient to allow someone to develop some code and experience what it was like. You could think of this as a kind of “vintage software” project, to try to capture the sense of fluidity in the development cycle.\nWe hope to provide a platform for demonstration of early experiments of hypertext (Notecards), Desktop management (Rooms), Object-oriented programming (LOOPS), as well as Interlisp itself.\nProcess Primarily this is a matter of testing and debugging. Identified issues are documented in the Interlisp/medley repo.\nWe’re also trying to “modernize” some things; for example, we’re adding Unicode support for IO (Interlisp-D was built before Unicode, and supports an older Xerox encoding). As with most open source projects, what we’re able to accomplish depends on volunteers\nFor example, Interlisp SEDIT is the canonical ancestral structure editor. Masterscope and the “file package” included system-management tools that combined features of version control and build systems, with comprehensive cross referencing support.\nMedley was the last release of the Xerox Lisp environment, before the whole environment was renamed Medley. It was originally written in Interlisp (a dialect separate from the MACLISP/Common Lisp tradition, with its own ancestry), but later, Common Lisp also became part of the environment. Medley includes a WYSIWYG text editor (TEdit), email organizer (Lafite), performance tools (Spy) and many other libraries and user contributed code (from the 1980s).\nThe 1992 ACM Software System Award, to Daniel G. Bobrow, Richard R. Burton, L. Peter Deutsch, Ronald M. Kaplan, Larry Masinter, Warren Teitelman\n… for their pioneering work in programming environments that integrated\n– source-language debuggers,\n– fully compatible integrated interpreter/compiler,\n– automatic change management,\n– structure-based editing,\n– logging facilities,\n– interactive graphics, and\n– analysis/profiling tools\nin the Interlisp system.\n","categories":"","description":"","excerpt":"Interlisp The 1970s and 80s saw major advances in computing and …","ref":"/about/","tags":"","title":"About"},{"body":"The 2021 Medley Interlisp Annual Report provides a detailed report on 2021 accomplishments.\nRecent Updates 3/2022 Interlisp Online new version! Many new/improved features. From any (recent) browser. Medley is running “in the cloud” and you connect to it (and your account) over the web. Medley Documentation. We’ve been updating the online documentation at least for getting started – instructions on Running in various contexts and Building and Using. Interlisp.Org has been approved as tax-exempt by California Franchise Tax Board and the California AG, State Charity Registration Number: CT0278267 We have joined (as an “implementation sponsor”) the Software Preservation Network. See Interlisp and SPN for more information. Many updates to Medley features and files; most releases have a ‘What’s Changed’ section or URL. 1/2022 Merry Christmas and Happy New Year\nSteve’s Medley Interlisp: The Interactive Environment reformated for easier online reading. Joining the Software Preservation Network. Interlisp.online progress, changes expected New User documentation Still awaiting California Franchise Tax Board (FTB) to confirm exempt status (ETA April) work on Lisp-based GitHub client, comparison of Lisp files 12/2021 Interlisp Online: Run Medley Interlisp in the cloud with just a browser. No download or install. Lower the barrier to entry. Of course, it’s better to install a release on your own machine, but for the casual visitor, this is better. Still under development but try it out, report problems (use issue tag ‘online’). There seem to be problems with Safari on older macs–try Firefox or Chrome. a mouse and keyboard are still necessary on tablets. For the immersive “Lisp Machine” experience, run “fullscreen”. HiRes display? Most browsers will let you scale the pixels. InterlispOrg Inc has been approved as a 501c3 with the IRS. The simplest way to donate is using the GitHub Sponsor button. recent reviews on twitter were complimentary of our efforts 11/2021 Medley Interlisp: Tools and Utilities (Interlisp book 3) now available for preview; comments and corrections welcome.\n2021 Annual Report November 15, 2021 (also in PDF).\n","categories":"","description":"","excerpt":"The 2021 Medley Interlisp Annual Report provides a detailed report on …","ref":"/news/","tags":"","title":"News"},{"body":"Zotero Interlisp Bibliography The collection of Interlisp and Lisp related materials can be found at Intelisp Bibliography\n","categories":"","description":"","excerpt":"Zotero Interlisp Bibliography The collection of Interlisp and Lisp …","ref":"/publications/zotero/","tags":"","title":"Zotero Bibliography"},{"body":"Source Code Source code packages for the latest stable and development versions of Graphviz are available, along with instructions for anonymous access to the sources using Git.\nExecutable Packages Packages marked with an asterisk(*) are provided by outside parties. We list them for convenience, but disclaim responsibility for the contents of these packages.\nLinux We do not provide precompiled packages any more. You may find it useful to try one of the following third-party sites.\nUbuntu packages*\nsudo apt install graphviz Fedora project*\nsudo yum install graphviz Debian packages*\nsudo apt install graphviz Stable and development rpms for Redhat Enterprise, or CentOS systems* available but are out of date.\nsudo yum install graphviz Windows Stable Windows install packages:\nPrior to 2.46 series Development Windows install packages\n2.46.0 and newer Prior to 2.46.0 Cygwin Ports* provides a port of Graphviz to Cygwin.\nWinGraphviz* Win32/COM object (dot/neato library for Visual Basic and ASP).\nChocolatey packages Graphviz for Windows.\nchoco install graphviz Windows Package Manager provides Graphviz Windows packages.\nwinget install graphviz Mostly correct notes for building Graphviz on Windows can be found here.\nMac MacPorts* provides both stable and development versions of Graphviz and the Mac GUI Graphviz.app. These can be obtained via the ports graphviz, graphviz-devel, graphviz-gui and graphviz-gui-devel.\nsudo port install graphviz Homebrew* has a Graphviz port.\nbrew install graphviz We need help with OSX, if you would like to volunteer.\nWe would appreciate if someone donates a script to run pkgbuild or productbuild to automatically generate OSX installers. Packaging for Apple Administrators could be a good reference. Note graphviz needs postinstall actions, at least dot -c; also fc-cache if Graphviz has freetype/cairopango drivers.\nSolaris For Solaris, please use the graphviz stable releases here. These are maintained by Laurent Blume / John Ellson. Currently available packages are:\ngraphviz Graph Visualization Tools graphviz_dev Graphviz headers etc. for development graphvizdoc Graphviz documentation graphvizgdGraphviz renderers using gd graphvizgraphsGraphviz example graphs graphvizguileGraphviz language binding for guile graphvizperlGraphviz language binding for perl graphvizpythonGraphviz language binding for python graphvizrubyGraphviz language binding for ruby graphvizsharpGraphviz language binding for C# graphviztclGraphviz language binding for tcl Minimally, graphviz and graphvizgd should be installed.\nOther Unix FreeBSD* ","categories":"","description":"","excerpt":"Source Code Source code packages for the latest stable and development …","ref":"/download/","tags":"","title":"Download"},{"body":"NOTE: Lately, the effort has focused on developing a Zotero annotated bibliography; the idea is to focus the timeline on material and source code published at the time. Any narrative around that would then constitute secondary sources. That will allow future researchers to construct their own narratives.\nInterlisp Timeline This draft started with Teitelman’s History of Interlisp, Still need to merge in links from Software Preservation History, https://Interlisp.org/#history, info-1100, and other sources. “facts” should be backed up by links to their sources.\nSee Interlisp History. which should also be merged in.\nSee/comment on Demo Plans for Medley Interlisp for ideas for demos.\n1960s Through the 1960s, the languages of programming were primarily Fortran and assembly. Lisp enabled expressing recursion simply. Lisp also provided the ability to modify a program as it was running, since Lisp programs were themselves data—the same as other list structures used to represent program data. This made Lisp an ideal language for writing programs that themselves constructed programs or proved things about programs. As an area of Artificial Intelligence, programs writing programs was something of great interest to those working on applying AI to programming. Lisp was at that time just a language. Programming in Lisp consisted of submitting a job, usually as a deck of punched cards to run in batch mode on a mainframe. You could then pick up your output a few hours later, if lucky, otherwise the next day, and hope that it did not consist of a lengthy sequence of left parentheses or NILs, as would be the case if the program had certain kinds of bugs. 1964 L. Peter Deutsch (high school student) developed PDP-1 Lisp at MIT. [L. Peter Deutsch, quoted in lisp_doc.txt accompanying Bob Supnik’s Software Kit] L. Peter Deutsch and Edmund C. Berkeley. The LISP Implementation for the PDP-1 Computer. March 1964, pages 326-375 in Berkeley and Bobrow. PDF: Describes Basic PDP-1 LISP in detail, including full PDP-1 assembly language source code.\nThe introduction of time-sharing in the mid-60s changed the paradigm of software development. Instead of the developer doing their debugging offline, users could now interact directly with their program online. Time-sharing was originally developed as a way of making more efficient and economic use of a very expensive computer, but it also had the surprising side-effect of drastically reducing the amount of time it took to get a program working. Users experiencing this phenomenon reported that it was because they did not have to lose and then reestablish context so frequently, but could get very deep into their programs and the problems they presented, and stay there. The situation is analogous to trying to resolve an issue between two people via a conversation rather than sending letters back and forth. Regardless of how short the cycle of iteration is, e.g., if email is used instead of letters, if the process involves discovery and a lot of back-and-forth, it is much easier to do via a conversation. You could establish a context and stay focused until the problem was solved.\n1965 Teitelman’s experience with his Ph.D. work led him to the notion of building a system where the computer took an active role in helping make changes to a program. At the time, this was a very novel idea. The term “programming environment” was meant to suggest not only the usual specifics of both a programming system and language but also more elusive and subjective considerations such as ease of use and level of interaction, “forgiveness” of errors, human engineering, and system “initiative.” The programmer’s environment influences and to a large extent determines, what sort of problems they can (and will want to) tackle, how far they can go, and how fast. If the environment is “cooperative” and “helpful”, then the programmer can be more ambitious and productive. If not, they will spend most of their time and energy “fighting” the system, which at times seems bent on frustrating one’s best efforts. In 1965, there were very few tools for developing Lisp programs, and those that were available were very primitive.\n1966 MIT EE Dept PDP-36 manual http://bitsavers.org/pdf/mit/rle_pdp1/memos/pdp36_lisp_may66.pdf Teitelman started at Bolt, Beranek and Newman in Cambridge. At the time, BBN’s computer was a DEC PDP-1, and Daniel Murphy had written a version of Lisp 1.5 for it using ideas from Deutch’s work. This Lisp was really just a toy – single user, slow, small address space, but Teitelman started with Break and Prettyprint from MIT on his pursuit of a Lisp programming environment. http://www.softwarepreservation.org/projects/LISP/bbnlisp/BBN-LISP-System_Feb1966.pdf#page=49\n1967 In 1967, BBN purchased an SDS 940 computer from Scientific Data Systems and began work building a time-sharing system on it. The SDS 940 had a larger address space and the ability to support a paging system. BBN was awarded an ARPA contract to provide a LISP system that could be distributed to other ARPA sites for doing A.I. research. (ARPA = Advanced Research Projects Administration of the Department of Defense.) http://www.bitsavers.org/pdf/sds/9xx/940/ucbProjectGenie/940_LISP_Memo_2_Apr67.pdf Advising was a means of allowing the user to treat a particular function as a black box without knowing what was inside the box, wrap “advice” around it that could operate before the function ran, potentially changing its input parameters, after it ran, possibly changing its value, or { PrettyPrint which printed out a nicely formatted representation of Lisp programs, using indentation to indicate depth of structure. A Trace facility was also available which modified specified functions to print on the terminal their input parameters on entry and their value on exit. You could think of this as a special case of Advising. There was also a Break package which enabled the user to cause program execution to halt at the entry point to specific functions. The user could then examine the value of the function’s input parameters, and even change them, then cause the function to run, and again gain control so as to examine the value that the function returned or side effects of the function’s operation. The user could change input parameters and re-execute the function, or manually specify the desired value and have it be returned to the caller as though it had been the value produced by that function. Teitelman memo to SDS 940 LISP Users.\n1968 Work on Demand Paging software virtual memory was focused on supporting Lisp. Peter Deutsch wrote a structure editor in Lisp for editing Lisp programs. Prior to this, Lisp source was prepared and edited offline in textual form and read into the Lisp system. Peter’s editor enabled the user to edit Lisp programs without ever leaving Lisp. The editor provided operations for moving up, down, left or right in the list structure definition of a Lisp function, and to make insertions, deletions, or replacements, e.g. (-3 X) to insert X in front of the 3rd item in the current list, 2 to descend into the second item in the current list, 0 to ascend one level, etc. Other more sophisticated commands were soon added, such as a find command to search through all levels of the function being edited looking for a specified string or pattern, a mark command to mark, i.e. save, the current location, and a command to restore the context to one that had previously been marked, an ability to define macros, etc. The ability to edit a Lisp program in situ meant that a user could modify a running program and continue execution. For example, the user might be at a Break, evaluate the current function, identify a problem, edit the definition using the structure editor, and reevaluate the current, now modified function and go on.\n1969 Alice K. Hartley took over Dan Murphy’s role in BBN-LISP. A number of new data types were added to augment lists and numbers: arrays, strings, large numbers, floating-point numbers.\n1970s 1970 As Lisp users began to write larger and larger programs, performance began to be an issue. A compiler had been available for Lisp programs since the early sixties. In 1970, Danny Bobrow and Alice Hartley designed and implemented the “spaghetti stack”. This enabled running programs to search the current execution stack, e.g., find the second occurrence up the stack of the function FOO, and return the name of the function that called FOO, to alter the normal flow of control, e.g., return from a specified stack pointer a specified value (very useful when debugging programs in order to manually bypass a known problem), and to evaluate an expression or variable in a specified context, e.g., what is the value of x as of six function calls back up the stack. DWIM, the most well known, and in some cases reviled, feature of BBN-LISP was introduced in 1970. DWIM stands for Do-What-I-Mean and embodies Teitelman’s view that people’s time was more valuable/expensive than computer time. (This was a radical idea at the time.) When Teitelman first started programming in FORTRAN in 1960, he was appalled at receiving the error message, “on line 70, DIMENSION is misspelled”. If the FORTRAN compiler knew this to be the case, why didn’t it accept this and go on and compile his program? The BBN-LISP interpreter was modified so that rather than signal an error when an undefined function or unset variable was encountered, DWIM would use various heuristics to identify and attempt to correct the error. Spelling correction was the most common scenario. An algorithm was implemented that took advantage of the most common types of errors made by a touch typist, e.g., doubled characters, transpositions, case error, etc. A spelling list appropriate for the context of the error was searched, and a metric computed for each item on the list that measured the difference between that item and the unknown word. If the match was sufficiently close, e.g., the only difference being a doubled character or a transposition, the correction was performed without the user having to approve. Otherwise, the user was offered the closest match and asked to approve the correction. If the user approved or the correction was automatically done, a message was printed on the terminal and computation would continue as though the error had not occurred. If the user was not at the terminal, after an appropriate interval, DWIM would default to Yes or No depending on how close the match was. It was not uncommon for a user to perform some editing, then start a computation, go get some coffee, and come back to find the computation complete with several corrections having been made. DWIM could also handle the case where the user typed a number instead of ‘(‘ or ‘)’ because of failure to hit the shift key, e.g. 8COND instead of COND. This kind of error was particularly difficult to fix, because not only did it cause a misspelled function or variable, but totally altered the structure of the expression being evaluated. For the user to manually fix such an error using the structure editor required not only removing the 8 or 9, but rearranging the list structure. Having DWIM handle such errors was quite helpful. Spelling correction was also used in contexts besides evaluating Lisp expressions. For example, there was a spelling list of edit commands that was used to correct a mistyped editor command. When loading a file where the file name was not found, a spelling list of previously encountered file names would be used. Another innovation introduced to BBN-LISP in 1970 was the History package. The idea was rather than simply performing the operations requested by the user, call functions, edit expressions, perform break commands, etc., and discarding that information, to have an agent that would record what the user entered so that the user could examine the history, and replay portions of it, possibly with substitutions. (The history feature of the UNIX C-shell introduced in the late 70’s was patterned after the Interlisp history package.) The history also contained any messages displayed to the user during the execution of the corresponding event, e.g., any DWIM corrections, or messages about global variables being reset or functions being redefined, etc. As with DWIM, the History package grew out of the desire to offload manual tasks to the computer. Perhaps the most important piece of information stored in each history event was the information required to UNDO that operation. This was especially valuable in the context of editing. UNDO is functionality that every user now expects in an editor, but it was first introduced in BBN-LISP in 1970. The UNDO functionality provided in BBN-LISP still surpasses that available in today’s editors in that the user could UNDO operations out of order. For example, after performing a series of four or five editing operations, the user could realize that the information deleted in the first operation is needed, and would be able to UNDO just that operation by explicitly referring to that operation using the history package, without affecting the intervening operations. In addition to being able to UNDO edit operations, the user could also UNDO operations that were typed in at the top level or in a Break. This was most frequently used to undo assignments. It could also be used to undo an entire edit session, rather than undoing one command at a time, sort of a revert operation for S-expressions. The user could also arrange to have functions that they defined to be undoable by storing information on the history list.\n1971 The File Package was added in 1971. This was essentially a “make” for Lisp. The user could specify the set of functions, global variables, property lists, etc., to be contained in a specified file, and then “make” that file. When the file was loaded in a subsequent session, this information would be recorded and available. Whenever a component known to be in a specified file was modified, the system would know that the corresponding file needed to be rewritten. A cleanup function was provided that would write out all files that contained components that had been changed. The user would be informed about any items created or modified during the course of their session that did not appear in any of the user’s files, and therefore might be lost if the user abandoned their session without saving them somewhere. The only thing missing from the File Package that would be provided in UNIX Make was the notion of dependencies.\n1972 In 1972, Danny Bobrow and Warren Teitelman left BBN and went to the newly formed Xerox Palo Alto Research Center – PARC. BBN continued to provide the low-level support for the Lisp system, i.e., compiler, garbage collector, and all of the operating system interface, while the Lisp-based center of activity for the various packages and utilities moved to PARC. Both sites continued to be supported by ARPA, and to indicate this partnership and shared responsibility, BBN-LISP was renamed to be Interlisp. Around the ARPAnet, Interlisp continued to use the DEC PDP-10 as its principal platform.\n1973 “Interlisp Reference Manual, Acknowledgements and Background” (PDF). 1973. 1974 By 1974 a number of impressive extensions to Interlisp had been developed by Larry Masinter. These included a much more sophisticated version of Interlisp’s iterative statement, as well as a Record package that enabled a user to label various components of a list structure and refer to them by name, thereby eliminating the CADADRs and CDADDRs that made Lisp programs so difficult to read. The Record package also had the advantage that the user could change a record definition, and the program would automatically adopt the new structure. For example, if PERSON were defined as (RECORD PERSON (FIRSTNAME LASTNAME TITLE)), the expression (X:TITLE) would translate to (CADDR X). If the user later changed the definition of PERSON to (RECORD PERSON (FIRSTNAME INITIAL LASTNAME TITLE)), all expressions involving TITLE would automatically be retranslated to use CADDDR. Interlisp-10 sources from 1974\nMasterscope would analyze a large program and build a database of relationships between the various components that could then be queried using a natural language front end. For example, WHO CALLS FOO AND USES MUMBLE, EDIT WHERE X IS USED FREELY AND Y IS BOUND, etc. As LISP programs became larger and more complex and were being built by teams of programmers, rather than a single programmer, functionality such as that provided by Masterscope was invaluable in understanding, maintaining, and extending programs.\n1975 By 1975, Interlisp had become so rich in functionality that it was clear that word of mouth was no longer sufficient and in depth documentation was needed, especially since there was a large and growing community of users at the various ARPA sites that had little or no direct contact with the developers of Interlisp at PARC and BBN. Work on the first Interlisp manual, which turned out to be a year long project. When completed, the manual was over 500 pages and heavily indexed. It was written using PUB, a text formatting program developed at Stanford by Dan Swinehart and Larry Tesler. (This was back in the days when the only WYSIWYG editor was PARC’s Bravo which ran only on the Alto.) The fact that the manual was machine readable, and heavily indexed, meant Interlisp could use it to provide online help and documentation. The user could type in something like TELL ME ABOUT FILE PACKAGE and see on the terminal/screen the relevant text. In a break, the user could simply type ‘?’ and see an explanation of the input parameters for the current function.\n1976 In 1976, Dan Ingalls gave a presentation at PARC in which he demonstrated the first window system. Written in and for Smalltalk, the user interface and paradigm it provided for enabling the user to manage and work with multiple contexts was very compelling, and immediately inspired work to provide such a mechanism for Interlisp. At the time, although Peter Deutsch had developed a byte-coded instruction set for the Alto, it was under-powered for Lisp development. Bob Sproull came up with the idea for what would turn out to be the first client-server window system: use the Alto as the window server and Interlisp running on the time-shared PDP-10 clone as the client. and develop a protocol for having Interlisp tell the Alto what to display, and for the Alto to tell Interlisp about mouse clicks. Bob developed the ADIS (for Alto Display) package and Teitelman wrote DLISP in Interlisp. DLISP included a window manager and windowing system that enabled overlapping windows, cut and paste, etc. J Moore implemented a text package that would support display and editing of text in windows. Teitelman demonstrated this functionality at IJCAI in 1977, and presented a paper, a Display Oriented Programmer’s Assistant.\n1979 In 1979, PARC began the design of the Dorado, a high performance personal workstation. The availability of the Dorado also made possible building a Lisp with a native display capability, which led to the Interlisp-D project. 1980s Teitelman \u0026 Masinter, IEEE Computer, “The Interlisp Programming Environment” April 1981. https://github.com/Interlisp/history/tree/master/1980s/interlisp-10/1983-sumex-lisp\n1982 AAAI launch of 1108 (Dandelion) and 1132 (Dorado)\n1983 Chorus and Fugue Releases of Interlisp-D\n1984 Carol Release?\n1985 Harmony and Intermezzo releases Koto release (for Xerox 1186), some bits of Common Lisp\n1987 Lyric release\n1988 Medley 1.0 release. Medley supported all Sun’s running on SunOS, plus IRIX, AIX, HPUX, Ultrix, (i.e., BSD Unix)\n1989 Envos formed from XAIS April 10, Envos closes\n1990s 1991 August: Venue moves to new offices [Arun Weoch email] 3-byte atoms\n1992 Medley 2.0 with CLOS, MOP, for Dos 4.0 and Xerox 1186 ACM Software Systems award was given to the Interlisp team: “For their pioneering work in programming environments that integrated source-language debuggers, fully compatible integrated interpreter/compiler, automatic change management, structure-based editing, logging facilities, interactive graphics, and analysis/profiling tools in the Interlisp system.”\n1993 2000 The ADVISE/advice idea and names carried through to the Aspect/J system, and on into contemporary, mainstream Java frameworks. e.g. Spring: Chapter 6. Aspect Oriented Programming with Spring 2009 John Sybalsky obituary\n2010 Web Archive of top2bottom.ne medley.html MEDLEY Medley provides a rich software development environment, including a debugger, a list structure editor, a file package, a compiler, text-editing facilities, and other useful tools. With any interactive computer language, the user interacts with the system through an “executive,” which interprets and executes commands. Medley includes three such executives: Common Lisp, Xerox Common Lisp, and Interlisp. Medley is a programming system, containing not only a programming language but also many predefined programs and specialized programming tools. Medley’s interactive window-based debugger automatically appears when an error occurs. You can enter the debugger through a program execution error, a user-entered keyboard interrupt, or a programmer-specified break. When execution is halted for one of these reasons, the user can reset the system and unwind the stack, or enter the debugger. The break window is an executive window; you can perform any activity here that you can in other executive windows, including looking at the program’s current state, changing data structures, evaluating expressions changing a function, and calling the editor. These break facilities, familiar to Interlisp users, are now in the common Lisp executive as well. The programmer’s assistant. This tracks the user’s actions during a session, allowing them to be replayed, undone, or altered. The most common interaction with the programmer’s assistant occurs at the top level read-evaluate-print loop or in a break, where the user types in expressions for evaluation and sees the value printed out. The file package and compiler. The file browser provides a convenient user interface for manipulating files stored on a workstation or file server. The makefile option in the file package lets you compile an entire file. You can compile individual functions using the compile command for functions in memory, the Tcompl command for definitions stored in files, or the Recompile command for a combination of in-memory and file definitions. Medley also supports block compiling. The Spy tool lets you identify program bottlenecks. Structure and text editors. Medley offers a choice of structure (list) editors. Dedit and Sedit. When loaded, the Dedit library utility becomes the default structure editor. Sedit does not have the type-in buffer of Dedit; it automatically places Lisp structures that the user fills in by selecting a character or a structure. Sedit recognizes Lisp functions such as single quotes, back quotes, and commas. It automatically adds spaces to maintain legal structures. Medleys Tedit supports multiple fonts, embedded graphics, and document formatting. Figures created with the drawing program, Sketch, can also take screen snapshots. NOTECARDS Notecards tool collects, organizes, and presents hypermedia information. Many cards can be displayed at once, and each can contain text, sketches, or scanned graphics. Cards are connected by typed links and stored in “file boxes.” LOOPS Lisp Object-Oriented Programming System Objects give you a lot of power, but they’re not the whole answer. Sometimes, other ways of looking at a problem will work better. At times, plain procedural programming is best. Other times, you’ll want to trigger actions in response to changes in variables’ values. Yet other times, you’ll want to use rules to capture domain specific knowledge. LOOPS gives you all of these in one coherent package. LOOPS also gives you development tools that really help you while you work. You’ll want to keep track of the classes and objects you’ve created. LOOPS’ browsers let you do that. You’ll want to watch your rules in operation to find out where they’re going awry. LOOPS’ rule auditing facility lets you do that. Big systems often have many objects that start out the same, and slowly diverge as the system runs. Normally, you’d have to start off with completely separate objects, at a tremendous cost in memory. LOOPS lets you start with only a single real object. All the others are tiny “virtual copies” of that one. Each copy grows only as you change the values of its instance variables. The effect is the same as having many independent objects, without the memory cost. The classes and objects you create are the same blocks LOOPS is built out of. So the classes you create can be combined with LOOPS itself to extend its power. You wind up with a system that speaks your language and has tools to fit your needs-and your specialized tools have become part of LOOPS, so its power is brought to bear to solve your problem. “Medley is and has been a system before its time. Through the debuggers, the graphics and window systems, and the organized structure of the underlying Lisp systems, Medley provides a marvelous tool that creates enthusiasm and motivation for programmers, applications builders, application users, teachers, and students alike.\"-Patrick Goddi and Anne M. Keuneke\n2019 Jill Marci Sybalsky obituary\n2020 Medley Interlisp project begins\n","categories":"","description":"","excerpt":"NOTE: Lately, the effort has focused on developing a Zotero annotated …","ref":"/doc/info/history.html","tags":"","title":"History"},{"body":"Interlisp Online provides access to a version of Medley running in the cloud. All that is needed to get started is to create an account - simply an email address and password. Once an account has been created you can log in and start a Medley Interlisp session.\nSessions are preserved for an indefinite time (we haven’t worked out for how long – after 30 days of inactivity?). But it should be good for experimenting and introducing yourself to the environment. Anything you create in the online environment should be treated as transient. If you’re interested in developing and experimenting with Lisp programs then you will want to investigate other options. But, for a first foray, this is a good starting place. The Interlisp/online repository may have more details.\n","categories":"","description":"","excerpt":"Interlisp Online provides access to a version of Medley running in the …","ref":"/online/","tags":"","title":"Interlisp Online"},{"body":"On-line reference pages A Brief History of Interlisp Interlisp Books Introduction to Medley, Release 2.0 Tool manual pages ","categories":"","description":"","excerpt":"On-line reference pages A Brief History of Interlisp Interlisp Books …","ref":"/documentation/","tags":"","title":"Documentation"},{"body":"Interlisp Bibliography The following table represents a snapshot of the information captured in the Interlisp Zotero library.\nAuthor Title Notes Affenzeller, Michael Pichler, Franz Mittelmann, Rudolf On CAST.FSM Computation of Hierarchical Multi-layer Networks of Automata collection-title: Lecture Notes in Computer Science DOI: 10.1007/3-540-45654-6_3 Burwell, A. D. M. Computer manipulation of geological exploration data Shanor, Gordy G. Shanor, Gordy G. The Dipmeter Advisor - A dipmeter interpretation workstation Balzer, Robert Erman, Lee Feather, Martin Goldman, Neil London, Philip Wile, David Wilczynski, David Lingard, Robert Mark, William Mann, William Moore, James Pirtle, Mel Dyer, David Rizzi, William Cohen, Danny Barnett, Jeff Kameny, Iris Yemini, Yechiam Research in Progress at the Information Sciences Institute, University of Southern California Jain, Rekha Expert Systems: A Management Perspective Alberga, C. N. Brown, A. L. Leeman, G. B. Mikelsons, M. Wegman, M. N. A program development tool Sheil, Beau Interlisp-D: further steps in the flight from time-sharing Teitelman, Warren INTERLISP Teitelman, Warren History of Interlisp Teitelman, Warren INTERLISP documentation Myers, J. D. The background of INTERNIST I and QMR Friedland, Peter Special section on architectures for knowledge-based systems Lehtola, A. Jäppinen, H. Nelimarkka, E. Language-based environment for natural language parsing Allchin, James E. Keller, Arthur M. Wiederhold, Gio FLASH: a language-independent, portable file access system Sproull, Robert F. Raster graphics for interactive programming environments Cohen, Shimon The A-TABLE data-type for LISP systems Clinger, William D. Wand, Mitchell Hygienic macro technology Becker, Brett A. Denny, Paul Pettit, Raymond Bouchard, Durell Bouvier, Dennis J. Harrington, Brian Kamil, Amir Karkare, Amey McDonald, Chris Osera, Peter-Michael Pearce, Janice L. Prather, James Compiler Error Messages Considered Unhelpful: The Landscape of Text-Based Programming Error Message Research Bouvin, Niels Olof From NoteCards to Notebooks: There and Back Again Karttunen, Lauri Word play Korkut, Joomy Christiansen, David Thrane Extensible type-directed editing Bouvin, Niels Olof Klokmose, Clemens Nylandsted Classical Hypermedia Virtues on the Web with Webstrates Fisher, Lawrence M. Marvin Minsky: 1927-2016 Freeman, Dustin Balakrishnan, Ravin Tangible actions Viriyakattiyaporn, Petcharat Murphy, Gail C. Improving program navigation with an active help system , Wang, Yuejiao An empirical analysis of the evolution of user-visible features in an integrated development environment Pitman, Kent M. Common Lisp: the untold story White, Jon L. Bourbaki, Nickieben From massively monster machines to microchips: forces affecting Lisp language design for five decades Eisenberg, Andrew D. Kiczales, Gregor Expressive programs through presentation extension Floyd, Robert W. The paradigms of programming Kersten, Mik Murphy, Gail C. Using task context to improve programmer productivity Chapuis, Olivier Roussel, Nicolas Metisse is not a 3D desktop! Fuqua, Paul Slagle, James R. Gini, Maria L. List processing Fateman, Richard McCarthy, John Lisp Barron, David W. Linkers and loaders Filman, Robert E. Barrett, Stuart Lee, Diana D. Linden, Ted Inserting ilities by controlling communications Albizuri-Romero, Miren Begoña A retrospective view of CASE tools adoption Reiss, Steven P. The Desert environment Annotation: This is an example of an annotation on an item. Deutsch, L. Peter Finkbine, Ronald B. ACM Fellow profile Ehrlich, Kate A conversation with Austin Henderson Konkin, Douglas P. Oster, Gregory M. Bunt, Richard B. Exploiting software interfaces for performance measurement Beesley, Kenneth R. Arabic morphology using only finite-state operations Lampson, Butler W. Pier, Kenneth A. A processor for a high-performance personal computer Ungar, David Lieberman, Henry Fry, Christopher Debugging and the experience of immediacy Law, Rob An overview of debugging tools Stroustrup, Bjarne A history of C++: 1979--1991 Ungar, David Annotating objects for transport to other worlds Malone, Thomas W. Lai, Kum-Yew Fry, Christopher Experiments with Oval: a radically tailorable tool for cooperative work Prakash, Atul Knister, Michael J. A framework for undoing actions in collaborative systems Berlage, Thomas A selective undo mechanism for graphical user interfaces based on command objects Denning, Peter J. Dargan, Pamela A. A discipline of software architecture Wiil, Uffe K. Leggett, John J. Hyperform: using extensibility to develop dynamic, open, and distributed hypertext systems Kazman, Rick Kominek, John Information organization in multimedia resources Mancoridis, Spiros A multi-dimensional taxonomy of software development environments Prakash, Atul Knister, Michael J. Undoing actions in collaborative work Goldman, Neil Narayanaswamy, K. Software evolution through iterative prototyping Kurlander, David Feiner, Steven Interactive constraint-based search and replace Museum+Labs, Living Computers: livingcomputermuseum/Darkstar original-date: 2019-01-15T20:40:02Z Bobrow, Daniel G. Murphy, Daniel L. Structure of a LISP system using two-level storage: Communications of the ACM Bobrow, Daniel G. Wegbreit, Ben A model and stack implementation of multiple environments Bobrow, Daniel G. A note on hash linking Bates, Raymond L. Dyer, David Koomen, Johannes A. G. M. Implementation of Interlisp on the VAX Deutsch, L. Peter Bobrow, Daniel G. An efficient, incremental, automatic garbage collector Moore, J. Strother The Interlisp Virtual Machine Specification Sproull, Robert F. INTERLISP DISPLAY PRIMITIVES Masinter, Larry Interlisp-D at AAAI-82 Bobrow, Daniel Mittal, Sanjay Lanning, Stanley Stefik, Mark Programming Languages -- The LOOPS Project (1982-1986) , X3J13 Charter Steele, Guy L. COMMON LISP : the language Pitman, Kent M. Common Lisp Condition System , , , , , , Iterative technique for phrase query formation and an information retrieval... Greenfeld, Norton R. Apparatus for analyzing source code Bier, Eric A. Customizable user interfaces for programmed computer systems Reboh, Rene , Data-driven, functional expert system shell Gendron, Robert F. , , Computer based workstation for development of graphic representation of \u0026hellip; Rao, Ramana B. Window system with independently replaceable window functionality Teitelman, Warren Recent Improvements to 940 LISP Library , 1985 Harmony and Intermezzo releases Koto release (for Xerox 1186), some bits of Common Lisp , Medley Burton, Richard R. Kaplan, Ronald M. Masinter, B. Sheil, B. A. Bell, A. Bobrow, D. G. Deutsch, L. P. Haugeland, W. S. Papers on interlisp-D Interlisp Barela, Anne Introducing Darkstar: A Xerox Star Emulator Masinter, Larry Common Lisp Cleanup. — Software Preservation Group Masinter, Larry Melvin Global Program Analysis in an Interactive Envi ronment by Larry Melvin Masinter SSL.80-1 JANUARY 1980 , , , , , The BBN-LISP System Mears, Lyn Ann Rees, Ted Artificial intelligence Systems Xerox LOOPS, A Friendly Primer Chailloux, Jerome The use of LISP at computer centers in Western Germany Stoyan, Herbert LISP history Swanson, Mark Kessler, Robert Lindstrom, Gary An implementation of portable standard LISP on the BBN butterfly Bates, Raymond David, Dayer Koomen, Johannes Saunders, Steven Voreck, Donald Interlisp-VAX Users Manual Masintcr, Larry M. Interlisp-VAX: A Report Teitelman, Warren Kaplan, Ron new-lisp-messages.txt.1. Masinter, Larry PARCMESSAGE.TXT.1. Adeli, H. Paek, Y. J. Computer-aided analysis of structures in INTERLISP environment Allard, James R. Hawkinson, Lowell B. Real-time programming in Common Lisp Anderson, Kenneth R. Freeing the essence of a computation Becker, Jeffrey M. AQINTERLISP: An INTERLISP Program for Inductive Generalization of VL1 Event Sets Berkeley, Edmund Callis Bobrow, Daniel Gureasko The programming language LISP: Its operation and applications Bobrow, D. G. LISP bulletin Bobrow, Robert Grignetti, Mario Interlisp performance measurements Brachman, Ronald J. Smith, Brian C. Special issue on knowledge representation Chailloux, Jerome Technical notes: a VLISP interpreter on the VCMC1 machine Chailloux, Jérôme The VLISP KIT: description implementation and evaluation Galvani, Andrea Rodriguez-Natal, Alberto Cabellos-Aparicio, Albert Risso, Fulvio LISP-ROAM: network-based host mobility with LISP Greussay, Patrick Iterative interpretation of tail-recursive LISP procedures Moon, David A. Garbage collection in a large LISP system Moore, J. Strother The TXDT Package-Interlisp Text Editing Primitives Padget, Julian Chailloux, Jérôme Christaller, Thomas DeMantaras, Ramon Dalton, Jeff Devin, Matthieu Fitch, John Krumnack, Timm Neidl, Eugen Papon, Eric Pope, Stephen Queinnec, Christian Steels, Luc Stoyan, Herbert Desiderata for the standardization of LISP Pitman, Kent M. Ambitious evaluation: a new reading of an old issue Pratt, V. R. LISP-an Amicus Curiae Brief Queinnec, Christian A subjective view of Lisp Rhodes, Christophe Using Lisp-based pseudocode to probe student understanding Saeed, Faisel Book Review: EXPERT DATABASE SYSTEMS Proceedings from the 2nd Intl. Conference. April 25-27, 1988 Vienna, VA. Edited by Larry Kerschberg (Benjamin/Cummings Publishing Company, 1988) Schafmeister, Christian E. CANDO: A Compiled Programming Language for Computer-Aided Nanomaterial Design and Optimization Based on Clasp Common Lisp Smith, Robert Common Lisp's Predilection for Mathematical Programming Steele, Guy L. Parallelism in Lisp Stoyan, Herbert Lisp: themes and history Strandh, Robert An Improvement to Sliding Garbage Collection Tatar, Deborah G. Weinreb, Daniel A programmer's guide to common Lisp Tomoyuki, Tanaka Shigeru, Uzuhara Futures and multiple values in parallel Lisp Trancón y Widemann, Baltasar A reference-counting garbage collection algorithmfor cyclical functional programming Turner, Roy M. LP/LISP: literate programming for Lisp Wertz, Harald A system to understand incorrect programs Wood, Amy LJ Interviews Larry Gritz X3J13 Format for proposals to the cleanup committee (Version 14) Bobrow, Daniel G. Murphy, Daniel L. A note on the efficiency of a LISP computation in a paged machine Bobrow, Daniel G. Clark, Douglas W. Compact Encodings of List Structure Gabriel, Richard P. Steele, Guy L. A pattern of language evolution Kossow, Al PDP-10 software archive Tavani, Herman T. Cyberethics and the future of computing Wood, Larry Book Review: Practical User Interface Design by Larry Wood Dawson, Jeffrey L. Improved effectiveness from a real time LISP garbage collector McCarthy, J. An interesting LISP function Böhnke, Dorothea Eggerth, Claudia Die Arbeitsweise hypermedialer Lernsysteme am Beispiel der Systeme Lisp-Tutor und ELM-ART Böcker, Heinz-Dieter IX. OPTIMIST. Ein System zur Beurteilung und Verbesserung von Lisp-Code Lisp and Symbolic Computation McCarthy, John Recursive functions of symbolic expressions and their computation by machine, Part I Slagle, James R. A Heuristic Program that Solves Symbolic Integration Problems in Freshman Calculus Beckerle, Michael Beiser, Paul Duggan, Jerry Kerns, Robert Layer, Kevin Linden, Thom Masinter, Larry Unietis, David Extensions to Common LISP to Support International Character Sets Lenat, Douglas B. Prakash, Mayank Shepherd, Mary CYC: Using common sense knowledge to overcome brittleness and knowledge acquisition bottlenecks Waguespack, Leslie J. Hass, David F. A workbench for project oriented software engineering courses Foderaro, John Lisp environments Emanuelson, Pär Haraldsson, Anders On compiling embedded languages in LISP Bobrow, Daniel G. Kahn, Kenneth Kiczales, Gregor Masinter, Larry Stefik, Mark Zdybel, Frank CommonLoops: merging Lisp and object-oriented programming Burton, Richard R. Masinter, L. M. Bobrow, Daniel G. Haugeland, Willie Sue Kaplan, Ronald M. Sheil, B. A. Overview and status of DoradoLisp Rao, Ramana Pedersen, Jan O. Hearst, Marti A. Mackinlay, Jock D. Card, Stuart K. Masinter, Larry Halvorsen, Per-Kristian Robertson, George C. Rich interaction in the digital library Knight, James Y. Rideau, François-René Walczak, Andrzej Building Common Lisp programs using Bazel Strandh, Robert Fast Generic Dispatch for Common Lisp Gabriel, Richard P. Lisp: Good News, Bad News, How to Win Big , INTERLISP The Language And Its Usage International Lisp Conference 2014 Masinter, Larry M. Deutsch, L. Peter Local optimization in a compiler for stack-based Lisp machines Computer-Assisted Instruction (Bits and Bytes, Episode 7) Lisp Editing in the 80s - Interlisp SEdit Oldford, Wayne Graphical Programming (1988) - Part 0 , All the Widgets 2: Menus Oldford, Wayne Graphical Programming (1988) - Parts 1 and 2 Myers, Brad scrollbars Malone, Thomas W. The Information Lens Building towards a holistic development service — Amjad Masad Tannir, Adam The Next HOPE (2010): Lisp, The Oldest Language of the Future Barstow, David R. Overview of a display-oriented editor for INTERLISP Teitelman, W. Masinter, L. The Interlisp Programming Environment publisher: IEEE Computer Society , Truckin Knowledge Competition (1983) , The Colab Movie (1987) Wiederhold, Gio Blum, Robert L. Walker, Michael An Integration of Knowledge and Data Representation DOI: 10.1007/978-1-4612-4980-1_33 Weyl, Stephen An Interlisp Relational Data Base System. section: Technical Reports Reboh, Rene Sacerdoti, Earl A Preliminary QLISP Manual section: Technical Reports Stoyan, Herbert Early LISP history (1956 - 1959) Deutsch, L. Peter Experience with a microprogrammed Interlisp system Deutsch, L. Peter ByteLisp and its Alto implementation , Interlisp reference manual OCLC: 802551877 , , , Interlisp reference manual: Revised OCLC: 11098633 Deutsch, P. Status Report on Alto Lisp Deutsch, L. Peter A LISP machine with very compact programs Deutsch, L. Peter INSIDE INTERLISP: TWO IMPLEMENTATIONS , XEROX COMMON LISP IMPLEMENTATION NOTES , Artificial Intelligence Systems, Interlisp-D: A Friendly Primer , INTERLISP-D RELEASE NOTES Interlisp-D Reference Manual, Volume I: Language OCLC: 802551877 Interlisp-D Reference Manual, Volume II: Environment OCLC: 802551877 Interlisp-D Reference Manual, Volume III: Input/Output OCLC: 802551877 Teitelman, Warren A display oriented programmer's assistant Teitelman, Warren A display oriented programmer's assistant , LISP-details INTERLlSP / 360 - 370 Teitelman, Warren Clisp: Conversational Lisp event: IEEE Transactions on Computers Teitelman, Warren Automated programmering: the programmer's assistant Teitelman, Warren PILOT: A Step Toward Man-Computer Symbiosis Accepted: 2004-10-20T20:06:03Z Gladwin, Lee A. Gladwin, Lee A. Review of Interlisp: The Language and Its Usage publisher: IEEE Computer Society Moore, J. Strother The INTERLISP Virtual Machine Specification: Revised Deutsch, P. Display primitives in Lisp Deutsch, L. Peter Lampson, Butler W. 930 LISP Reference Manual Weizenbaum, Joseph ELIZA, a computer program for the study of natural language communication between man and machine , , Preliminary Specification for BBN 940 LISP Bobrow, Daniel G. Teitelman, Warren Format-directed list processing in LISP Deutsch, L. Peter PDP-1 Lisp Deutsch, P. Preliminary Guide to the LISP Editor McCarthy, John LISP - notes on its past and future Stoyan, Herbert Lisp 50 years ago McCarthy, John LISP: a programming system for symbolic manipulations Bobrow, Daniel G. DeMichiel, Linda G. Gabriel, Richard P. Keene, Sonya E. Kiczales, Gregor Moon, David A. Common Lisp Object System specification Bobrow, Daniel G. Raphael, Bertram New Programming Languages for Artificial Intelligence Research Schrag, Robert C. Notes on the Conversion of LogLisp from Rutgers/UCI-Lisp to InterLisp, section: Technical Reports Teitelman, W. Proposal for Research on Interlisp and Network-Based Systems section: Technical Reports Gabriel, Richard P. McCarthy, John Queue-based multi-processing LISP Bates, Raymond L. Dyer, David Feber, Mark Recent developments in ISI-interlisp Burton, Richard R. Semantic grammar: an engineering technique for constructing natural language understanding systems Frieder, Gideon Shifting Reiss, Steven P. Simplifying data integration: the design of the desert software development environment Petrus, Edwin S. SKILL: a Lisp based extension language Bobrow, Daniel G. Storage management in LISP section: Technical Reports DeMichiel, Linda G. Gabriel, Richard P. The Common Lisp Object System: An Overview Steele, Guy L. Gabriel, Richard P. The evolution of Lisp Stoyan, Herbert The influence of the designer on the design—J. McCarthy and LISP Koomen, Johannes A. G. M. The interlisp virtual machine: study of its design and its implementation as multilisp DOI: 10.14288/1.0051801 Gabriel, Richard P. Performance and evaluation of LISP systems Jayaprakash, Rajesh pLisp: A Friendly Lisp IDE for Beginners Sheil, Beau POWER TOOLS FOR PROGRAMMERS DOI: 10.1016/B978-0-934613-12-5.50048-3 Chen, Wen-ke Bhansali, Sanjay Chilimbi, Trishul Gao, Xiaofeng Chuang, Weihaw Profile-guided proactive garbage collection for locality optimization Sandewall, Erik Programming in an Interactive Environment: the \"Lisp\" Experience Lipkis, Thomas A. Mark, William S. Pirtle, Melvin W. Design system using visual language Henderson, D. Austin Card, Stuart K. Maxwell, John T. User interface with multiple workspaces for sharing display system objects Kaplan, Ronald M. Maxwell, John T. III Text-compression technique using frequency-ordered array of word-number mappers Smith, Reid G. Schoen, Eric J. Object-oriented framework for menu definition Malone, Thomas W. Lai, Kum-Yew Yu, Keh-Chiang Berenson, Richard W. Object-oriented computer user interface Balban, Morton S. Lan, Ming-Shong Panos, Rodney M. Method of and apparatus for composing a press imposition Nunberg, Geoffrey D. Stansbury, Tayloe H. Abbott, Curtis Smith, Brian C. Method for manipulating digital text data Denber, Michel J. Jankowski, Henry P. Method and apparatus for thinning printed images Fabbrizio, Giuseppe Di Klarlund, Nils Method and apparatus for a programming language having fully undoable, timed reactive instructions Cunningham, Robert E. Bonar, Jeffery G. Corbett, John D. Interactive method of developing software interfaces Mackinlay, Jock D. Card, Stuart K. Robertson, George G. Image display systems Denber, Michel J. Graphics display system with improved dynamic menu selection Kaplan, Ronald M. Kay, Martin Maxwell, John Finite state machine data storage where data transition is accomplished without the use of pointers Harrison, Malcolm Review of The Programming Language LISP: Its Operation and Applications publisher: American Mathematical Society Finin, Tim Translating KL-One from interlisp to Franzlisp Bobrow, Daniel G. Murphy, Daniel L. THE STRUCTURE OF A LISP SYSTEM USING TWO-LEVEL STORAGE, SCIENTIFIC REPROT section: Technical Reports Deutsch, L. Peter PIVOT source listing Deutsch, L. Peter An interactive program verifier Murphy, Dan TENEX and TOPS-20 publisher: IEEE Teitelman, W. Bobrow, D. G. Hartley, A. K. Murphy, D. L. BBN - LISP, TENEX Reference Manual, Revised Bobrow, Daniel G. Darley, D. Lucille Deutsch, L. Peter Murphy, Daniel L. Teitelman, Warren THE BBN 940 LISP SYSTEM section: Technical Reports Teitelman, Warren DESIGN AND IMPLEMENTATION OF FLIP, A LISP FORMAT DIRECTED LIST PROCESSOR section: Technical Reports The BBN-LISP system: Reference Manual Teitelman, W. Bobrow, D. G. Hartley, A. K. Murphy, D. L. BBN - LISP, TENEX Reference Manual Bobrow, D. G. Deutsch, L. P. Murphy, D. L. General Structure of LISP 1.69 Naraln, Sanjai McArthur, David Klahr, Philip Large-scale system development in several lisp environments Boyd, Mickey R. Whalley, David B. Isolation and analysis of optimization errors Bundy, Alan Wallen, Lincoln Interlisp-D DOI: 10.1007/978-3-642-96868-6_103 Bobrow, Daniel G. Kahn, Kenneth Kiczales, Gregor Masinter, Larry Stefik, Mark Zdybel, Frank CommonLoops: merging Lisp and object-oriented programming Allen, Eric Cartwright, Robert Stoler, Brian DrJava: a lightweight pedagogic environment for Java Bobrow, Daniel G. Deutsch, L. Peter Extending Interlisp for modularization and efficiency Balzer, Robert M. A language-independent programmer's interface Rosenthal, David S.H. Emulation \u0026 Virtualization as Preservation Strategies Moore, J. Strother The Interlisp virtual machine specification (revised) Sacerdoti, Earl D. Fikes, Richard E. Reboh, Rene Sagalowicz, Daniel Waldinger, Richard J. Wilber, B. Michael Qlisp: a language for the interactive development of complex systems Attendees | Larry Masinter, The Medley Interlisp Project: Status and Plans | Meetup Texas Instruments Explorer Technical Summary, DDYB022 Austin, TX 7879 Texas Instruments Expert System Development Tools, DNJS058 Austin, TX 78792 TI Explorer Symbolic Processing System, DEES055 (brochure) Austin, TX 78792 Texas Instruments New Developments in Artificial Intelligence, DEEB024 (brochure) Austin, TX 78792 Brachman, Ronald Ciccarelli, Eugene Greenfeld, Norton Yonke, Martin KLONE Reference Manual: DOI: 10.21236/ADA122437 DeKleer, Johann Daniel G. Bobrow: In Memoriam publisher: Association for the Advancement of Artificial Intelligence (AAAI) Report Number: 38 Fatcat ID: release_wg4g7ikocbagxinabbk2eni52q Fiala, E. R. The Maxc Systems publisher: Institute of Electrical and Electronics Engineers Report Number: 11 Fatcat ID: release_q5bn52bkmvgfnfpyj3fa6wfnzy ACS Full Text Snapshot ANSI Common Lisp FAQ: Lisp Implementations and Mailing Lists 4/7 [Monthly posting] - [4-1] Commercial Common Lisp implementations. Introducing the Smalltalk Zoo section: Software History Center 999017_Users_Guide_To_Symbolics_Computers_Jul86.pdf genera-handbook.pdf genera-concepts.pdf EDITORS.pdf HARDWARE_1.pdf LMI_LispSW_Overview_Jun82.pdf LMI_lambdaOverview_1982.pdf LM-2_Unibus_IO_Sep81.pdf Lisp-Machine_Data_Types.pdf Lisp_Machine_Hardware_Memos.pdf Chaosnet_Jun82.pdf Chaosnet_File_Protocol_Sep81.pdf 3600_TechnicalSummary_Feb83.pdf 990075_Lisp_Machine_Summary_3600_Edition_Aug83.pdf Symbolics_File_System_Aug81.pdf Symbolics_Software_1981.pdf Symbolics_Overview_1986.pdf Symbolics Software Symbolics Overview (Briefing) Symbolics File Systems CHAOSNet File Protocol Lisp Machines Summary -3600Edition #990075 3600 Technical Summary - Feb83 ED285570.pdf Xerox Alto Emulator Kaplan, Ronald M. Sheil, B. A. Adding Type Declarations to Interlisp. PLDI 2021: The Evolution of Smalltalk from Smalltalk-72 through Squeak PLDI 2021: The Evolution of Smalltalk from Smalltalk-72 through Squeak Card, Stuart Oral history interview with Stuart Card Accepted: 2021-03-04T21:17:00Z publisher: Charles Babbage Institute Code of Best Practices in Fair Use for Software Preservation Some thoughts about raising the profile of Lisp NOTES ON XEROX LISP MACH DEMO (archives of email about the common lisp standard and related) Cardoso-Llach, Daniel Kaltman, Eric Erdolu, Emek Furste, Zachary An Archive of Interfaces: Exploring the Potential of Emulation for Software Research, Pedagogy, and Design Gabriel, Richard P. Performance and Evaluation of LISP Systems DOI: 10.7551/mitpress/5298.001.0001 Truckin’ and the Knowledge Competitions | MJSBlog Clark, Douglas W. List Structure: Measurements, Algorithms, and Encodings Dan Murphy's TECO, TENEX, and TOPS-20 Papers ahc_20150101_jan_2015.pdf Running Lisp in Production ","categories":"","description":"","excerpt":"Interlisp Bibliography The following table represents a snapshot of …","ref":"/publications/table/","tags":"","title":"Bibliography"},{"body":"The Interlisp team is using Zotero to create a detailed bibliography of works documenting Lisp, Interlisp and the fruits of various research activities these domains touched upon.\nZotero Bibliography The following table represents a snapshot of the data within Zotero:\nBibliography ","categories":"","description":"","excerpt":"The Interlisp team is using Zotero to create a detailed bibliography …","ref":"/publications/","tags":"","title":"Publications"},{"body":"MIT License Copyright 2022 Interlisp.org contributors\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n","categories":"","description":"","excerpt":"MIT License Copyright 2022 Interlisp.org contributors\nPermission is …","ref":"/license/","tags":"","title":"License"},{"body":"Interlisp has benefited by the contributions of many people over the years.\nThe Interlisp Medley Restoration Project has benefited from the contribution of many people, including:\nLarry Masinter Rob Kaplan Nick Briggs Frank Halasz Herb Jellinek Steve Kaisler Wayne Marci Paul McJones Bruce Mitchener John Cowan Arun Welch Michele Denber Blake McBride Abe Jellinek Bill Stumbo ","categories":"","description":"","excerpt":"Interlisp has benefited by the contributions of many people over the …","ref":"/credits/","tags":"","title":"Credits"},{"body":"If you cannot find the answer to your question here, ask it in the Graphviz forum.\nContributions FaqPSdefs PostScript defs for ISO-latin1 fonts (by Enrique Vidal) General Where can I see a list of all the attributes that control dot or neato? Where can I discuss Graphviz? Post questions and comments in the Graphviz forum\nI’m trying to make a layout larger. How? How can I join or merge certain edge routes in dot? How can I generate graph layouts in PDF? How can I make duplicate nodes? How can I set a graph or cluster label without its propagating to all sub-clusters? ","categories":"","description":"","excerpt":"If you cannot find the answer to your question here, ask it in the …","ref":"/faq/","tags":"","title":"FAQ"},{"body":"Please join the Interlisp forum to ask questions and discuss Interlisp.\nIf you have a bug or believe something is not working as expected, please submit a bug report using the issues section in GitHub.\nIf you have a general question or are unsure how things work, please consider posting to the Interlisp forum.\n","categories":"","description":"","excerpt":"Please join the Interlisp forum to ask questions and discuss …","ref":"/contact/","tags":"","title":"Contact"},{"body":"The Medley Interlisp Restoration team meets weekly via Zoom. If you’re interested in contributing please join us:\nMonday, 1:00 pm ET / 10:00 am PT\nZoom ID: 408 332 4290\n","categories":"","description":"","excerpt":"The Medley Interlisp Restoration team meets weekly via Zoom. If you’re …","ref":"/getinvolved/","tags":"","title":"Get Involved"},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Documentation/DGKN97.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Documentation/EGKNW03.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Documentation/GH10.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Documentation/GHK09.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Documentation/GK06.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Documentation/GKN04.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Documentation/GKN04a.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Documentation/GN98.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Documentation/GN99.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Documentation/Hu05.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Documentation/NW01.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Documentation/TSE93.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Misc/dot_from_pl.pl.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Misc/gprof2dot.awk.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Misc/pl_from_gprof.pl.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Misc/ru_translation.rtf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/misc/spline-o-matic/index.html/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Misc/spline-o-matic/splino.gif.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Misc/spline-o-matic/splino.tgz.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/misc/sql2dot/index.html/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Misc/sql2dot/sql2dot.jar.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Misc/webdot.pl.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/Misc/webdot_cgi.txt.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/acyclic.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/bcomps.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/ccomps.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/cdt.3.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/cgraph.3.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/cgraph.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/cluster.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/diffimg.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/dijkstra.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/dot.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/dotguide.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/dotty.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/dottyguide.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/edgepaint.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gc.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gdtclft.3tcl.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gml2gv.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/graphml2gv.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gv.3guile.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gv.3java.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gv.3perl.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gv.3php.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gv.3python.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gv.3ruby.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gv.3tcl.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gvc.3.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gvcolor.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gvedit.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gvgen.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gvmap.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gvpack.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gvpr.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/gxl2gv.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/lefty.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/leftyguide.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/libguide.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/lneato.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/mingle.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/mm2gv.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/neatoguide.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/nop.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/oldlibguide.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/osage.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/pack.3.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/patchwork.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/pathplan.3.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/sccmap.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/smyrna.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/tcldot.3tcl.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/tkspline.3tk.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/tred.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/unflatten.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/vimdot.1.pdf.html","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/_pages/pdf/xdot.3.pdf.html","tags":"","title":""},{"body":"Medley Interlisp is open-source and may be obtained from GitHub. It is portable to many different Linux and Apple MacOS systems, as well as Windows using WSL2.\nThe core is written in portable C. The system currently depends on an X11 system for its display. Obtaining The System\nThe system comes in two parts. The first is a C-based virtual machine Maiko.\nThe remainder of the system is OS / architecture-independent and can be found in the Medley repository.\nYou can now download Medley Interlisp from a release without building anything; see the Medley README\nSee The Maiko README for build instructions for Maiko, for systems for which there is no pre-built release.\n","categories":"","description":"","excerpt":"Medley Interlisp is open-source and may be obtained from GitHub. It is …","ref":"/doc/build.html","tags":"","title":"Building the Interlisp system"},{"body":"\nPlease join the Interlisp Medley Users Group to ask questions and discuss Interlisp.\nWhat is Interlisp Medley? Medley Interlisp is the environment originally developed for the Xerox Lisp machines (called D-machines, names Dorado, Dolphin, Dandelion, Daybreak). The project was spun out to a company called Envos, which then turned into Venue.\nIt was the first IDE with a window/mouse/menu GUI, launched as a product from Xerox in 1980. It was a base from which AI applications were built, as well as a research project in its own right.\nFor example, Interlisp SEDIT is the canonical ancestral structure editor. Masterscope and the “file package” included system-management tools that combined features of version control and build systems, with comprehensive cross referencing support.\nMedley was the last release of the Xerox Lisp environment, before the whole environment was renamed Medley. It was originally written in Interlisp (a dialect separate from the MACLISP/Common Lisp tradition, with its own ancestry), but later, Common Lisp also became part of the environment. Medley includes a WYSIWYG text editor (TEdit), email organizer (Lafite), performance tools (Spy) and many other libraries and user contributed code (from the 1980s).\nWhat have we lost? A presentation from the 2020 Remote Chaos Experience conference highlights some of the interesting aspects of Interlisp. The presentation synopsis states it this way:\nWe have ended up in a world where UNIX and Windows have taken over, and most people have never experienced anything else. Over the years, though, many other system designs have come and gone, and some of those systems have had neat ideas that were nevertheless not enough to achieve commercial success. We will take you on a tour of a variety of those systems, talking about what makes them special.\nDocumentation Interlisp Medley documentation for is available in from here: Documentation.\nDocumentation on building and running the restored version of Interlisp Medley can be found here: ??\nDiscussions You can post questions and comments to the Medley Interlisp Users Group.\nBug And Issue Tracking You can report or view bugs and issues by visiting the Interlisp Medley Issues page.\n","categories":"","description":"","excerpt":"\nPlease join the Interlisp Medley Users Group to ask questions and …","ref":"/","tags":"","title":"Interlisp"},{"body":"The Interlisp todo list has moved to the Interlisp issue tracker.\n","categories":"","description":"","excerpt":"The Interlisp todo list has moved to the Interlisp issue tracker.\n","ref":"/doc/todo.html","tags":"","title":"Interlisp Wish List"},{"body":"","categories":"","description":"","excerpt":"","ref":"/misc/","tags":"","title":"Misc"},{"body":"Source Packages For most cases where you want or need to build from source, you should download one of the source packages linked below. They contain all of required generated files. The typical installation process is:\n./configure make make install The configure script has many options for further tailoring the build process to your machine. Run\n./configure --help to see these.\nGraphviz Stable Releases Development Snapshots post-2.46.0 pre-2.46.0 Webdot Stable Releases webdot-2.30.tar.gz, md5 Development Snapshots webdot-2.39.20170725.2013.tar.gz, md5 Git Repos If you wish to build from the tip-of-tree source repositories for Graphviz and Webdot, these can be found at:\nhttps://gitlab.com/graphviz/graphviz/ https://gitlab.com/graphviz/webdot/ You can either download the zip file or clone the repository. Instructions for the latter can be found here.\nIf you are taking this approach, then you must have recent versions of “libtool”, “automake”, and “autoconf”. The build process is basically the same as above with the addition of one more step:\n./autogen.sh ./configure make make install Requirements Dependencies Consider these versions as the minimum suitable for Graphviz, but please always use the latest available version of these packages. If there is any problem with building Graphviz against a latest version, please generate a bug report as we would very much like to know about it.\nHINT: If you are using an rpm-based system, by far the easiest way to determine all the build dependencies is to download the graphviz-xxx.src.rpm, run: rpmbuild --rebuild graphviz-xxx.src.rpm 2\u003et , then edit t into a yum install command.\ncairo-1.1.10.tar.gz [optional (required for libpangocairo), recommended] http://cairographics.org/ expat-2.0.0.tar.gz [optional (required for HTML-like labels), recommended] http://expat.sourceforge.net/ freetype-2.1.10.tar.gz [optional (required for libpangocairo and for gd), recommended] http://www.freetype.org/ gd-2.0.34.tar.gz [optional, deprecated but needed for GIF output] http://www.boutell.com/gd/ fontconfig-2.3.95.tar.gz [optional (required for libpangocairo and for gd), recommended] http://www.fontconfig.org/wiki/ urw-fonts.tar.gz [optional, required if fontconfig is unable to find any fonts] ftp://ftp.gimp.org/pub/gimp/fonts glib-2.11.1.tar.gz [optional (required for libpangocairo), recommended] http://www.gtk.org/ libpng-1.2.10.tar.gz [optional (required for cairo, optional for gd), recommended] http://www.libpng.org/pub/png/ pango-1.12.4.tar.gz provides libpangocairo [optional, recommended] http://www.pango.org/ zlib-1.2.3.tar.gz [optional (required for libpng), recommended] http://www.zlib.net/ GTS [optional (required for sfdp, prism, smyrna), recommended] http://gts.sourceforge.net/ GTK+ [optional (required for smyrna)] http://www.gtk.org/ GtkGLExt [optional (required for smyrna)] http://projects.gnome.org/gtkglext/ Glade [optional (required for smyrna)] http://glade.gnome.org/ Glut [optional (required for smyrna)] http://www.opengl.org/resources/libraries/glut/ Tools autoconf-2.61.tar.gz [if building from git] http://ftp.gnu.org/gnu/autoconf/ automake-1.9.6.tar.gz [if building from git] http://ftp.gnu.org/gnu/automake/ bison-3.0.tar.gz [if building from git] http://ftp.gnu.org/gnu/bison/ flex-2.5.4a.tar.gz [if building from git] http://ftp.gnu.org/non-gnu/flex/ gcc-4.5.0.tar.bz2 http://ftp.gnu.org/gnu/gcc/ gcc-g++-4.5.0.tar.bz2 http://ftp.gnu.org/gnu/gcc/ ghostscript-8.54-gpl.tar.gz http://pages.cs.wisc.edu/~ghost/ libtool-1.5.22.tar.gz [if building from git] http://ftp.gnu.org/gnu/libtool/ pkg-config-0.20.tar.gz http://www.freedesktop.org/wiki/Software/pkg-config/ swig-1.3.29.tar.gz http://www.swig.org/ ","categories":"","description":"","excerpt":"Source Packages For most cases where you want or need to build from …","ref":"/download/source/","tags":"","title":"Source Code"}]